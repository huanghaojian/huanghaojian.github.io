<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java服务端Cors跨域资源共享配置]]></title>
    <url>%2F2017%2F11%2F01%2FJava%E6%9C%8D%E5%8A%A1%E7%AB%AFCors%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[摘要 Java服务端Cors跨域资源共享配置,解决与Spring Security冲突引起的问题 (一) CORS介绍 CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 response响应头: 响应头字段名称 作用 Access-Control-Allow-Origin 允许访问的客户端的域名 Access-Control-Allow-Credentials 是否允许请求带有验证信息，若要获取客户端域下的cookie时，需要将其设置为true。 Access-Control-Allow-Headers 允许服务端访问的客户端请求头 Access-Control-Allow-Methods 允许访问的HTTP请求方法 Access-Control-Max-Age 用来指定预检请求的有效期(秒)，在有效期内不在发送预检请求直接请求。 Cors详细介绍请看阮一峰的跨域资源共享 CORS 详解 (二) 服务端配置CORS(Spring boot) 简单粗暴,直接写个filter拦截所有请求在response头里加上面的字段. 继承WebMvcConfigurerAdapter重写addCorsMappings 123456789public class CorsConfig extends WebMvcConfigurerAdapter &#123; @Override public void addCorsMappings(CorsRegistry registry) &#123; registry.addMapping(&quot;/**&quot;) .allowedHeaders(&quot;*&quot;) .allowedMethods(&quot;*&quot;) .allowedOrigins(&quot;*&quot;); &#125;&#125; 自定义Filter,注册 1234567891011121314@Bean public FilterRegistrationBean corsFilter() &#123; UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); CorsConfiguration config = new CorsConfiguration(); config.addAllowedOrigin(&quot;*&quot;); config.setAllowCredentials(true); config.addAllowedHeader(&quot;*&quot;); config.addAllowedMethod(&quot;*&quot;); source.registerCorsConfiguration(&quot;/**&quot;, config); FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source)); bean.setOrder(0); return bean; &#125; @CrossOrigin注解 1234567@CrossOrigin( origins = &quot;*&quot;, allowCredentials = &quot;true&quot;, allowedHeaders = &quot;*&quot;, methods = RequestMethod.GET, maxAge = 3600) (三) 出现的问题:由于我使用了Spring Security,即使配置了响应头字段,还是不能访问,经过反复测试,最后想到可能因为我用了Spring Security,而Spring Security拦截了我的请求,导致配置不成功. 解决方法: 配置Spring Security,设置不拦截OPTIONS请求 1HttpSecurity#authorizeRequests().antMatchers(HttpMethod.OPTIONS).permitAll() 配置CorsFilter优先级,优于Spring Security配置即可]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>cors</tag>
        <tag>spring security</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络IP地址组成子网划分]]></title>
    <url>%2F2017%2F10%2F24%2FUntitled%2F</url>
    <content type="text"><![CDATA[(一) IP地址的表示IPv4采用32位的二进制数表示:********.********.********.******** 采用点分十进制法: X.X.X.X (将8位二进制转为十进制,所以0&lt;=X&lt;=255) 例: 10000000,00001011,00000011,00011111 点分十进制法:128.11.3.31 (二) IP地址的分类二级Ip地址由两个固定长度的字段组成,其中一个是网络号net-id,它标志主机(或路由器)所连接到的网络,另一个是主机号host-id,它标志该主机(或路由器) IP地址 ::= {&lt;网络号&gt;,&lt;主机号&gt;} 类型 地址范围 网络号 A类地址 1.0.0.0-126.255.255.255 1-126 B类地址 128.0.0.0-191.255.255.255 128.1-192.255 C类地址 192.0.0.0-223.255.255.255 192.0.1-223.255.255 D类地址 224.0.0.0-239.255.255.255 224.0.0.1-239.255.255.255 E类地址 240.0.0.0-247.255.255.255 240.0.0.1-247.255.255.255 注:A类地址中网络号占8位,前导号固定为0,剩下7位,由于网络号全为0的IP地址是保留地址,网络号为127保留作为本地回环地址,剩下可分配网络号126个,所以网络号为(1-126), C类地址中192.0.0.0不指派,最小地址为192.0.1.0 主机位不可全0或全1（全0是网络地址，全1是广播地址） 类型 网络总数 一个网络最大主机数 A类地址 2^7 - 2 2^24 - 2 B类地址 2^14 2^16 - 2 C类地址 2^21 - 1 2^8 - 2 (三) 私有IP地址 A类: 10.0.0.0 - 10.255.255.255 B类: 172.16.0.0 - 172.31.255.255 C类: 192.168.0.0 - 192.168.255.255 (四) IP地址的相关规定 网络地址,主机地址,广播地址 网络地址: 主机位全为0 主机地址: 网络位全为0 直接广播地址: 主机位全为1 例: 210.121.1.55 网络地址为: 210.121.1.0 主机地址为: 0.0.0.55 直接广播地址: 210.121.1.255 (五) 子网划分将一个大的网络划分为几个较小的网络,将两级的IP地址在本单位内部变成三级IP地址:IP地址 ::= {&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;} 5.1 子网掩码子网掩码用来区别网络位和主机位，用1表示网络位，用0表示主机位。 比如： A类IP地址的掩码：11111111.00000000.00000000.00000000 写成十进制 255.0.0.0也可以用/8来表示，表示前8位是网络位，比如：10.3.3.3/8 B类IP地址的掩码：11111111.11111111.00000000.00000000 写成十进制 255.255.0.0也可以用/16来表示，表示前16位是网络位，比如：172.16.7.6/16 C类IP地址的掩码：11111111.11111111.11111111.00000000 写成十进制 255.255.255.0也可以用/24来表示，表示前24位是网络位，比如：192.168.5.8/24子网掩码为255.255.255.255表示本网段只有1个IP地址，举例：电信运营商动态分配给用户的IP地址110.80.191.243和子网掩码255.255.255.255。 5.2 子网划分计算向主机位借1位可以划分成2个子网，借2位划分成4个子网，借3位划分成8个子网，如下： 2^8＝256，2^7＝128，2^6＝64，2^5＝32，2^4＝16，2^3＝8，2^2＝4，2^1＝2 5.3 举例举例1：172.17.0.3/19子网掩码是多少 (借3位) 子网掩码11111111.11111111.11100000.00000000 即255.255.224.0 举例2：192.168.6.7/26子网掩码是多少 (借2位) 子网掩码11111111.11111111.11111111.11000000 即255.255.255.192 举例3：IP地址172.16.37.95，子网掩码为255.255.224.0，写出网络地址、主机地址和广播地址。 解答：224表示借3位，172.16.37.95→172.16.00100101.95； 网络地址：172.16.00100000.0→172.16.32.0 (主机位全0) 主机地址：0.0.00000101.95→0.0.5.95 (网络位全0) 广播地址：172.16.00111111.255→172.16.63.255 (主机位全1)]]></content>
  </entry>
  <entry>
    <title><![CDATA[docker配置国内镜像加速器]]></title>
    <url>%2F2017%2F10%2F23%2Fdocker%E6%8D%A2%E6%BA%90%2F</url>
    <content type="text"><![CDATA[由于docker仓库在国外,所以导致访问速度慢,下载异常的问题.所以在国内最好还是换成国内源. Docker 官方提供的中国registry mirror 阿里云加速器 DaoCloud 加速器 下面用的是阿里云加速器: 注册用户并且申请加速器,会获得如 https://jxus37ad.mirror.aliyuncs.com 这样的地址。我们需要将其配置给Docker 引擎。 方法一:对于使用systemd的系统,用systemctl enable docker启用服务后,编辑/etc/systemd/system/multi-user.target.wants/docker.service 文件,找到ExecStart=这一行,在这行最后添加加速器地址--registry-mirror=&lt;加速器地址&gt;,如: 12ExecStart=/usr/bin/dockerd --registry-mirror=https://jxus37ad.mirror.aliyuncs.com 注:对于1.12以前的版本,dockerd换成docker daemon。 方法二: 针对Docker客户端版本大于1.10的用户您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器： 12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;&#123; &quot;registry-mirrors&quot;: [&quot;https://f4e0xm4x.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pip安装]]></title>
    <url>%2F2017%2F10%2F23%2Fpip%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[The PyPA recommended tool for installing Python packages.(pip是python的一个包管理工具) pip官方使用文档: https://pip.pypa.io/en/stable/installing/# Ubuntu 16.04安装python pip3安装pip31sudo apt-get install python-pip3 pip更新1pip3 install --upgrade pip pip换阿里源创建文件 ~/.pip/pip.conf 加入下列配置 123[global]trusted-host=mirrors.aliyun.comindex-url = https://mirrors.aliyun.com/pypi/simple/]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pip</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mosquitto安装、配置、测试、paho.mqtt-spy安装]]></title>
    <url>%2F2017%2F10%2F15%2Fmosquitto%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-paho-mqtt-spy%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[mosquitto是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，提供轻量级的，支持可发布/可订阅的的消息推送模式，使设备对设备之间的短消息通信变得简单，比如现在应用广泛的低功耗传感器，手机、嵌入式计算机、微型控制器等移动设备。 (一) Ubuntu 安装 mosquitto1234apt-add-repository ppa:mosquitto-dev/mosquitto-ppaapt-get updateapt-get install mosquittoapt-get install mosquitto-clients (二) 修改/etc/mosquitto/mosquitto.conf123456789pid_file /var/run/mosquitto.pidpersistence truepersistence_location /var/lib/mosquitto/log_dest file /var/log/mosquitto/mosquitto.log# 将其他配置配置到此处方便管理include_dir /etc/mosquitto/conf.d (三) mosquitto配置文件[详细参考]安全配置 (/etc/mosquitto/conf.d/security.conf)1234567891011# =================================================================# Security# =================================================================# 禁止匿名用户访问allow_anonymous false# 用户密码配置文件,路径为绝对路径password_file /etc/mosquitto/pwdfile.example# 访问规则列表acl_file /etc/mosquitto/aclfile.example 访问规则列表配置 (/etc/mosquitto/aclfile.example)1234# 用户限制user &lt;username&gt;# 用户可以访问的topic和权限topic [read|write] &lt;topic&gt; (四) 新建用户12345# 用户格式为&lt;username&gt;:&lt;password&gt;# 第一次创建用户,再次创建会覆盖原文件mosquitto_passwd -c /etc/mosquitto/pwdfile.example &lt;userName&gt;# 新增用户mosquitto_passwd -U /etc/mosquitto/pwdfile.example &lt;userName&gt; (五) 启动服务123service mosquitto startormosquitto -c /etc/mosquitto/mosquitto.conf -d (六) 终端测试订阅 mosquitto_sub -t -u -P 1mosquitto_sub -t mqtt -u hao -P 123456 发布 mosquitto_pub -t -m -u -P 1mosquitto_pub -t mqtt -m message -u hao -P 123456 (七) paho.mqtt-spy图形化界面测试下载连接 https://github.com/eclipse/paho.mqtt-spy/releases/download/1.0.1-beta5/mqtt-spy-1.0.1-beta-b5-jar-with-dependencies.jar 启动paho.mqtt-spy1java -jar mqtt-spy-1.0.1-beta-b5-jar-with-dependencies.jar (八) 创建paho.mqtt-spy桌面图标12vim ~/.local/share/applications/mqtt-spy.desktop# 添加以下内容 123456789[Desktop Entry]Version=1.0Name=mqtt-spyComment=mqtt-spyType=ApplicationCategories=Development;Exec=java -jar 安装目录/paho.mqtt-spy/jar/mqtt-spy-1.0.1-beta-b5-jar-with-dependencies.jarTerminal=falseIcon=安装目录/paho.mqtt-spy/mqtt-spy/src/main/resources/ui/images/mqtt-spy-logo.png]]></content>
      <tags>
        <tag>mosquitto</tag>
        <tag>mqtt</tag>
        <tag>paho</tag>
        <tag>mqtt-spy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
